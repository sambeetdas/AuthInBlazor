@page "/signin"

@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Components.Authorization
@using Model.Constants
@using Model.DTOs
@using Service.Contracts
@using System.Security.Claims
@using WebApp.Provider


@inject IUserService UserService
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider



<h1>Sign In</h1>

<EditForm Model="@user">
    <div class="form-group">
        <label for="txtEmail">Email address</label>
        <input type="email" class="form-control" id="txtEmail" @bind-value="user.Email" aria-describedby="emailHelp">
        <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
    </div>
    <div class="form-group">
        <label for="txtPassword">Password</label>
        <input type="password" class="form-control" id="txtPassword" @bind-value="user.Password">
    </div>
    <button type="submit" class="btn btn-primary" @onclick="Signin">Sign In</button>
</EditForm>

<div>
    <p class="text-danger">@message</p>
</div>

@*@if (isError)
{
    <div class="alert alert-danger" role="alert">
        Incorrect Credential.
    </div>
}*@



@code {
    private UserModel user = new UserModel();
    private bool isError = false;
    private string message = string.Empty;
    private async Task Signin()
    {
        var validUser = await UserService.ValidUser(user);

        if (validUser != null)
        {
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, user.Name),
                new Claim(ClaimTypes.Email, user.Email),
                new Claim(ClaimTypes.Role, user.Role)

            };

            var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

            var principal = new ClaimsPrincipal(identity);

            //await AuthenticationStateProvider.GetAuthenticationStateAsync();

            var authProperties = new AuthenticationProperties
            {
                IsPersistent = true
            };

            await AuthenticationStateProvider.SignInAsync(principal, authProperties);


            isError = false;
            Navigation.NavigateTo("/", true);
        }
        else
        {
            message = "invalid credentials";
            isError = true;
        }
    }
}